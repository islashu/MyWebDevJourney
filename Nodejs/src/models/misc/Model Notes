Yes, it may be confusing but the model folder will contain all declarations of what an entity looks like in accordance to clean code architecture

## The moment a model has functional methods, methods with actual declaration and implementation
it will no longer be in this far but will be separate

A good example is like user.repository.ts, it is a repository that has methods that are functional and has implementation
It is a class like a model but since it has an actual use case, it is not an entity but a working file

Another example is like controllers which are classes as well but they have actual implementations

The reason why there are described as classes is because of clean code architecture. This is primary an OOP concept and is design specifically for OOP
Since JS / TS is a multi paradigm language, you will see some discrepancies but in PURE OOP languages, this will make a lot of sense.

To allows clean code architecture, we need classes and interfaces to allow for dependency injection, inversion of control and decoupling

It is just how it is and it will be confusing.

In any case, follow the structure and you will be fine.


We are also going to follow the getters and setters technique in typescript because it gives us the advantage of adding conditions to our getters
and setters before returning a value which is going to be useful for checking


It is going to be more verbose but i think its for the better
Do take note that now all the variable names will start with _ so becareful when you are using them and setting them

A good way is just to convert to a certain class first and then use the class methods to set the values rather than accessing it when you receive as JSON
or else its going to have alot of issues.


